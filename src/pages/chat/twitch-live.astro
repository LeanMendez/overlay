---
import '../../styles/global.css';
import ChatOverlay from '../../components/overlays/ChatOverlay';
import TwitchIntegration from '../../components/overlays/TwitchIntegration';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat Overlay - Twitch Live</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        background: transparent !important;
        overflow: hidden;
        /* Force hardware acceleration for OBS */
        transform: translateZ(0);
        -webkit-transform: translateZ(0);
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
        will-change: transform;
      }

      /* Ensure React root renders properly in OBS */
      #root, body > div {
        width: 100%;
        height: 100%;
        position: relative;
      }
    </style>
  </head>
  <body>
    <!-- Componente de integraci√≥n con Twitch (invisible) -->
    <div id="twitch-integration-container"></div>

    <!-- Chat Overlay - CENTERED FOR DEBUG -->
    <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;">
      <ChatOverlay client:load position="right" width={400} />
    </div>

    <script>
      import { createRoot } from 'react-dom/client';
      import { createElement } from 'react';
      import TwitchIntegration from '../../components/overlays/TwitchIntegration';

      // Cargar configuraci√≥n de Twitch
      const configJson = localStorage.getItem('twitchConfig');

      if (!configJson) {
        // Mostrar mensaje de error si no hay configuraci√≥n
        document.body.innerHTML = `
          <div style="
            position: fixed;
            inset: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            font-family: sans-serif;
            text-align: center;
            padding: 2rem;
          ">
            <div>
              <h1 style="font-size: 2rem; margin-bottom: 1rem;">‚ö†Ô∏è Twitch Not Configured</h1>
              <p style="margin-bottom: 1.5rem; opacity: 0.8;">
                Please configure your Twitch credentials first
              </p>
              <a href="/twitch-setup" style="
                display: inline-block;
                background: #9147ff;
                color: white;
                padding: 0.75rem 2rem;
                text-decoration: none;
                border-radius: 0.5rem;
                font-weight: bold;
              ">
                Go to Setup
              </a>
            </div>
          </div>
        `;
      } else {
        // Parsear configuraci√≥n
        const config = JSON.parse(configJson);

        // Renderizar componente de integraci√≥n
        const container = document.getElementById('twitch-integration-container');
        if (container) {
          const root = createRoot(container);
          root.render(
            createElement(TwitchIntegration, {
              config,
              autoConnect: true
            })
          );
        }

        // Mostrar indicador de conexi√≥n
        const statusIndicator = document.createElement('div');
        statusIndicator.id = 'connection-status';
        statusIndicator.style.cssText = `
          position: fixed;
          top: 10px;
          left: 10px;
          background: rgba(0, 0, 0, 0.8);
          color: white;
          padding: 8px 16px;
          border-radius: 4px;
          font-family: sans-serif;
          font-size: 12px;
          z-index: 10000;
          border: 1px solid rgba(255, 255, 255, 0.2);
        `;
        statusIndicator.textContent = 'üîÑ Connecting to Twitch...';
        document.body.appendChild(statusIndicator);

        // Debug: Escuchar eventos de chat para verificar
        let messageCount = 0;
        window.addEventListener('chatMessage', (event) => {
          messageCount++;
          console.log('‚úÖ Chat message event received!', messageCount, event);
          statusIndicator.textContent = `‚úì Connected | ${messageCount} msgs`;
        });

        // Actualizar indicador cuando se conecte
        setTimeout(() => {
          statusIndicator.textContent = '‚úì Connected to Twitch - Waiting for messages...';
          statusIndicator.style.borderColor = 'rgba(0, 255, 0, 0.5)';

          // NO ocultar, dejar visible para debug
          // setTimeout(() => {
          //   statusIndicator.style.opacity = '0';
          //   statusIndicator.style.transition = 'opacity 1s';
          //   setTimeout(() => statusIndicator.remove(), 1000);
          // }, 3000);
        }, 2000);

        // Debug: Log cuando se conecte el WebSocket
        console.log('üéÆ Twitch Integration initialized with config:', {
          clientId: config.clientId.substring(0, 10) + '...',
          broadcasterId: config.broadcasterId
        });
      }
    </script>
  </body>
</html>
